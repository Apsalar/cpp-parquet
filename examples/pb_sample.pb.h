// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_sample.proto

#ifndef PROTOBUF_pb_5fsample_2eproto__INCLUDED
#define PROTOBUF_pb_5fsample_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb_sample {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pb_5fsample_2eproto();
void protobuf_AssignDesc_pb_5fsample_2eproto();
void protobuf_ShutdownFile_pb_5fsample_2eproto();

class Document;
class Document_mlinks;
class Document_mname;
class Document_mname_mlanguage;

// ===================================================================

class Document_mlinks : public ::google::protobuf::Message {
 public:
  Document_mlinks();
  virtual ~Document_mlinks();

  Document_mlinks(const Document_mlinks& from);

  inline Document_mlinks& operator=(const Document_mlinks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Document_mlinks& default_instance();

  void Swap(Document_mlinks* other);

  // implements Message ----------------------------------------------

  Document_mlinks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Document_mlinks& from);
  void MergeFrom(const Document_mlinks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 Backward = 1;
  inline int backward_size() const;
  inline void clear_backward();
  static const int kBackwardFieldNumber = 1;
  inline ::google::protobuf::int64 backward(int index) const;
  inline void set_backward(int index, ::google::protobuf::int64 value);
  inline void add_backward(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      backward() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_backward();

  // repeated int64 Forward = 2;
  inline int forward_size() const;
  inline void clear_forward();
  static const int kForwardFieldNumber = 2;
  inline ::google::protobuf::int64 forward(int index) const;
  inline void set_forward(int index, ::google::protobuf::int64 value);
  inline void add_forward(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      forward() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_forward();

  // @@protoc_insertion_point(class_scope:pb_sample.Document.mlinks)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > backward_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > forward_;
  friend void  protobuf_AddDesc_pb_5fsample_2eproto();
  friend void protobuf_AssignDesc_pb_5fsample_2eproto();
  friend void protobuf_ShutdownFile_pb_5fsample_2eproto();

  void InitAsDefaultInstance();
  static Document_mlinks* default_instance_;
};
// -------------------------------------------------------------------

class Document_mname_mlanguage : public ::google::protobuf::Message {
 public:
  Document_mname_mlanguage();
  virtual ~Document_mname_mlanguage();

  Document_mname_mlanguage(const Document_mname_mlanguage& from);

  inline Document_mname_mlanguage& operator=(const Document_mname_mlanguage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Document_mname_mlanguage& default_instance();

  void Swap(Document_mname_mlanguage* other);

  // implements Message ----------------------------------------------

  Document_mname_mlanguage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Document_mname_mlanguage& from);
  void MergeFrom(const Document_mname_mlanguage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string Country = 2;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 2;
  inline const ::std::string& country() const;
  inline void set_country(const ::std::string& value);
  inline void set_country(const char* value);
  inline void set_country(const char* value, size_t size);
  inline ::std::string* mutable_country();
  inline ::std::string* release_country();
  inline void set_allocated_country(::std::string* country);

  // @@protoc_insertion_point(class_scope:pb_sample.Document.mname.mlanguage)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_country();
  inline void clear_has_country();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* code_;
  ::std::string* country_;
  friend void  protobuf_AddDesc_pb_5fsample_2eproto();
  friend void protobuf_AssignDesc_pb_5fsample_2eproto();
  friend void protobuf_ShutdownFile_pb_5fsample_2eproto();

  void InitAsDefaultInstance();
  static Document_mname_mlanguage* default_instance_;
};
// -------------------------------------------------------------------

class Document_mname : public ::google::protobuf::Message {
 public:
  Document_mname();
  virtual ~Document_mname();

  Document_mname(const Document_mname& from);

  inline Document_mname& operator=(const Document_mname& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Document_mname& default_instance();

  void Swap(Document_mname* other);

  // implements Message ----------------------------------------------

  Document_mname* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Document_mname& from);
  void MergeFrom(const Document_mname& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Document_mname_mlanguage mlanguage;

  // accessors -------------------------------------------------------

  // repeated .pb_sample.Document.mname.mlanguage Language = 1;
  inline int language_size() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 1;
  inline const ::pb_sample::Document_mname_mlanguage& language(int index) const;
  inline ::pb_sample::Document_mname_mlanguage* mutable_language(int index);
  inline ::pb_sample::Document_mname_mlanguage* add_language();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_sample::Document_mname_mlanguage >&
      language() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_sample::Document_mname_mlanguage >*
      mutable_language();

  // optional string Url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:pb_sample.Document.mname)
 private:
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb_sample::Document_mname_mlanguage > language_;
  ::std::string* url_;
  friend void  protobuf_AddDesc_pb_5fsample_2eproto();
  friend void protobuf_AssignDesc_pb_5fsample_2eproto();
  friend void protobuf_ShutdownFile_pb_5fsample_2eproto();

  void InitAsDefaultInstance();
  static Document_mname* default_instance_;
};
// -------------------------------------------------------------------

class Document : public ::google::protobuf::Message {
 public:
  Document();
  virtual ~Document();

  Document(const Document& from);

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Document& default_instance();

  void Swap(Document* other);

  // implements Message ----------------------------------------------

  Document* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Document_mlinks mlinks;
  typedef Document_mname mname;

  // accessors -------------------------------------------------------

  // required int64 DocId = 1;
  inline bool has_docid() const;
  inline void clear_docid();
  static const int kDocIdFieldNumber = 1;
  inline ::google::protobuf::int64 docid() const;
  inline void set_docid(::google::protobuf::int64 value);

  // optional .pb_sample.Document.mlinks Links = 2;
  inline bool has_links() const;
  inline void clear_links();
  static const int kLinksFieldNumber = 2;
  inline const ::pb_sample::Document_mlinks& links() const;
  inline ::pb_sample::Document_mlinks* mutable_links();
  inline ::pb_sample::Document_mlinks* release_links();
  inline void set_allocated_links(::pb_sample::Document_mlinks* links);

  // repeated .pb_sample.Document.mname Name = 3;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::pb_sample::Document_mname& name(int index) const;
  inline ::pb_sample::Document_mname* mutable_name(int index);
  inline ::pb_sample::Document_mname* add_name();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_sample::Document_mname >&
      name() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_sample::Document_mname >*
      mutable_name();

  // @@protoc_insertion_point(class_scope:pb_sample.Document)
 private:
  inline void set_has_docid();
  inline void clear_has_docid();
  inline void set_has_links();
  inline void clear_has_links();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 docid_;
  ::pb_sample::Document_mlinks* links_;
  ::google::protobuf::RepeatedPtrField< ::pb_sample::Document_mname > name_;
  friend void  protobuf_AddDesc_pb_5fsample_2eproto();
  friend void protobuf_AssignDesc_pb_5fsample_2eproto();
  friend void protobuf_ShutdownFile_pb_5fsample_2eproto();

  void InitAsDefaultInstance();
  static Document* default_instance_;
};
// ===================================================================


// ===================================================================

// Document_mlinks

// repeated int64 Backward = 1;
inline int Document_mlinks::backward_size() const {
  return backward_.size();
}
inline void Document_mlinks::clear_backward() {
  backward_.Clear();
}
inline ::google::protobuf::int64 Document_mlinks::backward(int index) const {
  // @@protoc_insertion_point(field_get:pb_sample.Document.mlinks.Backward)
  return backward_.Get(index);
}
inline void Document_mlinks::set_backward(int index, ::google::protobuf::int64 value) {
  backward_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_sample.Document.mlinks.Backward)
}
inline void Document_mlinks::add_backward(::google::protobuf::int64 value) {
  backward_.Add(value);
  // @@protoc_insertion_point(field_add:pb_sample.Document.mlinks.Backward)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Document_mlinks::backward() const {
  // @@protoc_insertion_point(field_list:pb_sample.Document.mlinks.Backward)
  return backward_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Document_mlinks::mutable_backward() {
  // @@protoc_insertion_point(field_mutable_list:pb_sample.Document.mlinks.Backward)
  return &backward_;
}

// repeated int64 Forward = 2;
inline int Document_mlinks::forward_size() const {
  return forward_.size();
}
inline void Document_mlinks::clear_forward() {
  forward_.Clear();
}
inline ::google::protobuf::int64 Document_mlinks::forward(int index) const {
  // @@protoc_insertion_point(field_get:pb_sample.Document.mlinks.Forward)
  return forward_.Get(index);
}
inline void Document_mlinks::set_forward(int index, ::google::protobuf::int64 value) {
  forward_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb_sample.Document.mlinks.Forward)
}
inline void Document_mlinks::add_forward(::google::protobuf::int64 value) {
  forward_.Add(value);
  // @@protoc_insertion_point(field_add:pb_sample.Document.mlinks.Forward)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Document_mlinks::forward() const {
  // @@protoc_insertion_point(field_list:pb_sample.Document.mlinks.Forward)
  return forward_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Document_mlinks::mutable_forward() {
  // @@protoc_insertion_point(field_mutable_list:pb_sample.Document.mlinks.Forward)
  return &forward_;
}

// -------------------------------------------------------------------

// Document_mname_mlanguage

// required string Code = 1;
inline bool Document_mname_mlanguage::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Document_mname_mlanguage::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Document_mname_mlanguage::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Document_mname_mlanguage::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& Document_mname_mlanguage::code() const {
  // @@protoc_insertion_point(field_get:pb_sample.Document.mname.mlanguage.Code)
  return *code_;
}
inline void Document_mname_mlanguage::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:pb_sample.Document.mname.mlanguage.Code)
}
inline void Document_mname_mlanguage::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_sample.Document.mname.mlanguage.Code)
}
inline void Document_mname_mlanguage::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_sample.Document.mname.mlanguage.Code)
}
inline ::std::string* Document_mname_mlanguage::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_sample.Document.mname.mlanguage.Code)
  return code_;
}
inline ::std::string* Document_mname_mlanguage::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document_mname_mlanguage::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_sample.Document.mname.mlanguage.Code)
}

// optional string Country = 2;
inline bool Document_mname_mlanguage::has_country() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Document_mname_mlanguage::set_has_country() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Document_mname_mlanguage::clear_has_country() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Document_mname_mlanguage::clear_country() {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_->clear();
  }
  clear_has_country();
}
inline const ::std::string& Document_mname_mlanguage::country() const {
  // @@protoc_insertion_point(field_get:pb_sample.Document.mname.mlanguage.Country)
  return *country_;
}
inline void Document_mname_mlanguage::set_country(const ::std::string& value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(value);
  // @@protoc_insertion_point(field_set:pb_sample.Document.mname.mlanguage.Country)
}
inline void Document_mname_mlanguage::set_country(const char* value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_sample.Document.mname.mlanguage.Country)
}
inline void Document_mname_mlanguage::set_country(const char* value, size_t size) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  country_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_sample.Document.mname.mlanguage.Country)
}
inline ::std::string* Document_mname_mlanguage::mutable_country() {
  set_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    country_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_sample.Document.mname.mlanguage.Country)
  return country_;
}
inline ::std::string* Document_mname_mlanguage::release_country() {
  clear_has_country();
  if (country_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = country_;
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document_mname_mlanguage::set_allocated_country(::std::string* country) {
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (country) {
    set_has_country();
    country_ = country;
  } else {
    clear_has_country();
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_sample.Document.mname.mlanguage.Country)
}

// -------------------------------------------------------------------

// Document_mname

// repeated .pb_sample.Document.mname.mlanguage Language = 1;
inline int Document_mname::language_size() const {
  return language_.size();
}
inline void Document_mname::clear_language() {
  language_.Clear();
}
inline const ::pb_sample::Document_mname_mlanguage& Document_mname::language(int index) const {
  // @@protoc_insertion_point(field_get:pb_sample.Document.mname.Language)
  return language_.Get(index);
}
inline ::pb_sample::Document_mname_mlanguage* Document_mname::mutable_language(int index) {
  // @@protoc_insertion_point(field_mutable:pb_sample.Document.mname.Language)
  return language_.Mutable(index);
}
inline ::pb_sample::Document_mname_mlanguage* Document_mname::add_language() {
  // @@protoc_insertion_point(field_add:pb_sample.Document.mname.Language)
  return language_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_sample::Document_mname_mlanguage >&
Document_mname::language() const {
  // @@protoc_insertion_point(field_list:pb_sample.Document.mname.Language)
  return language_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_sample::Document_mname_mlanguage >*
Document_mname::mutable_language() {
  // @@protoc_insertion_point(field_mutable_list:pb_sample.Document.mname.Language)
  return &language_;
}

// optional string Url = 2;
inline bool Document_mname::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Document_mname::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Document_mname::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Document_mname::clear_url() {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& Document_mname::url() const {
  // @@protoc_insertion_point(field_get:pb_sample.Document.mname.Url)
  return *url_;
}
inline void Document_mname::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set:pb_sample.Document.mname.Url)
}
inline void Document_mname::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_sample.Document.mname.Url)
}
inline void Document_mname::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_sample.Document.mname.Url)
}
inline ::std::string* Document_mname::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    url_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_sample.Document.mname.Url)
  return url_;
}
inline ::std::string* Document_mname::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Document_mname::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_sample.Document.mname.Url)
}

// -------------------------------------------------------------------

// Document

// required int64 DocId = 1;
inline bool Document::has_docid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Document::set_has_docid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Document::clear_has_docid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Document::clear_docid() {
  docid_ = GOOGLE_LONGLONG(0);
  clear_has_docid();
}
inline ::google::protobuf::int64 Document::docid() const {
  // @@protoc_insertion_point(field_get:pb_sample.Document.DocId)
  return docid_;
}
inline void Document::set_docid(::google::protobuf::int64 value) {
  set_has_docid();
  docid_ = value;
  // @@protoc_insertion_point(field_set:pb_sample.Document.DocId)
}

// optional .pb_sample.Document.mlinks Links = 2;
inline bool Document::has_links() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Document::set_has_links() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Document::clear_has_links() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Document::clear_links() {
  if (links_ != NULL) links_->::pb_sample::Document_mlinks::Clear();
  clear_has_links();
}
inline const ::pb_sample::Document_mlinks& Document::links() const {
  // @@protoc_insertion_point(field_get:pb_sample.Document.Links)
  return links_ != NULL ? *links_ : *default_instance_->links_;
}
inline ::pb_sample::Document_mlinks* Document::mutable_links() {
  set_has_links();
  if (links_ == NULL) links_ = new ::pb_sample::Document_mlinks;
  // @@protoc_insertion_point(field_mutable:pb_sample.Document.Links)
  return links_;
}
inline ::pb_sample::Document_mlinks* Document::release_links() {
  clear_has_links();
  ::pb_sample::Document_mlinks* temp = links_;
  links_ = NULL;
  return temp;
}
inline void Document::set_allocated_links(::pb_sample::Document_mlinks* links) {
  delete links_;
  links_ = links;
  if (links) {
    set_has_links();
  } else {
    clear_has_links();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_sample.Document.Links)
}

// repeated .pb_sample.Document.mname Name = 3;
inline int Document::name_size() const {
  return name_.size();
}
inline void Document::clear_name() {
  name_.Clear();
}
inline const ::pb_sample::Document_mname& Document::name(int index) const {
  // @@protoc_insertion_point(field_get:pb_sample.Document.Name)
  return name_.Get(index);
}
inline ::pb_sample::Document_mname* Document::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:pb_sample.Document.Name)
  return name_.Mutable(index);
}
inline ::pb_sample::Document_mname* Document::add_name() {
  // @@protoc_insertion_point(field_add:pb_sample.Document.Name)
  return name_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_sample::Document_mname >&
Document::name() const {
  // @@protoc_insertion_point(field_list:pb_sample.Document.Name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_sample::Document_mname >*
Document::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:pb_sample.Document.Name)
  return &name_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb_sample

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pb_5fsample_2eproto__INCLUDED
